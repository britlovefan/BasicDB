--- javadoc/simpledb/BTreeFile.html	2016-11-10 13:43:05.000000000 -0600
+++ javadoc/simpledb/BTreeFile.html	1969-12-31 18:00:00.000000000 -0600
@@ -1,1534 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!-- NewPage -->
-<html lang="en">
-<head>
-<!-- Generated by javadoc (1.8.0_25) on Thu Nov 10 13:43:05 CST 2016 -->
-<title>BTreeFile</title>
-<meta name="date" content="2016-11-10">
-<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
-<script type="text/javascript" src="../script.js"></script>
-</head>
-<body>
-<script type="text/javascript"><!--
-    try {
-        if (location.href.indexOf('is-external=true') == -1) {
-            parent.document.title="BTreeFile";
-        }
-    }
-    catch(err) {
-    }
-//-->
-var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":10,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":10,"i30":10,"i31":10};
-var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
-var altColor = "altColor";
-var rowColor = "rowColor";
-var tableTab = "tableTab";
-var activeTableTab = "activeTableTab";
-</script>
-<noscript>
-<div>JavaScript is disabled on your browser.</div>
-</noscript>
-<!-- ========= START OF TOP NAVBAR ======= -->
-<div class="topNav"><a name="navbar.top">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.top.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/BTreeEntry.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/BTreeFileEncoder.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/BTreeFile.html" target="_top">Frames</a></li>
-<li><a href="BTreeFile.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_top">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_top");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.top">
-<!--   -->
-</a></div>
-<!-- ========= END OF TOP NAVBAR ========= -->
-<!-- ======== START OF CLASS DATA ======== -->
-<div class="header">
-<div class="subTitle">simpledb</div>
-<h2 title="Class BTreeFile" class="title">Class BTreeFile</h2>
-</div>
-<div class="contentContainer">
-<ul class="inheritance">
-<li>java.lang.Object</li>
-<li>
-<ul class="inheritance">
-<li>simpledb.BTreeFile</li>
-</ul>
-</li>
-</ul>
-<div class="description">
-<ul class="blockList">
-<li class="blockList">
-<dl>
-<dt>All Implemented Interfaces:</dt>
-<dd><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></dd>
-</dl>
-<hr>
-<br>
-<pre>public class <span class="typeNameLabel">BTreeFile</span>
-extends java.lang.Object
-implements <a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></pre>
-<div class="block">BTreeFile is an implementation of a DbFile that stores a B+ tree.
- Specifically, it stores a pointer to a root page,
- a set of internal pages, and a set of leaf pages, which contain a collection of tuples
- in sorted order. BTreeFile works closely with BTreeLeafPage, BTreeInternalPage,
- and BTreeRootPtrPage. The format of these pages is described in their constructors.</div>
-<dl>
-<dt><span class="simpleTagLabel">Author:</span></dt>
-<dd>Becca Taft</dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeLeafPage.html#BTreeLeafPage-simpledb.BTreePageId-byte:A-int-"><code>BTreeLeafPage.BTreeLeafPage(simpledb.BTreePageId, byte[], int)</code></a>, 
-<a href="../simpledb/BTreeInternalPage.html#BTreeInternalPage-simpledb.BTreePageId-byte:A-int-"><code>BTreeInternalPage.BTreeInternalPage(simpledb.BTreePageId, byte[], int)</code></a>, 
-<a href="../simpledb/BTreeHeaderPage.html#BTreeHeaderPage-simpledb.BTreePageId-byte:A-"><code>BTreeHeaderPage.BTreeHeaderPage(simpledb.BTreePageId, byte[])</code></a>, 
-<a href="../simpledb/BTreeRootPtrPage.html#BTreeRootPtrPage-simpledb.BTreePageId-byte:A-"><code>BTreeRootPtrPage.BTreeRootPtrPage(simpledb.BTreePageId, byte[])</code></a></dd>
-</dl>
-</li>
-</ul>
-</div>
-<div class="summary">
-<ul class="blockList">
-<li class="blockList">
-<!-- =========== FIELD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.summary">
-<!--   -->
-</a>
-<h3>Field Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
-<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Field and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private java.io.File</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#f">f</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>private int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#keyField">keyField</a></span></code>&nbsp;</td>
-</tr>
-<tr class="altColor">
-<td class="colFirst"><code>private int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#tableid">tableid</a></span></code>&nbsp;</td>
-</tr>
-<tr class="rowColor">
-<td class="colFirst"><code>private <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#td">td</a></span></code>&nbsp;</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.summary">
-<!--   -->
-</a>
-<h3>Constructor Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
-<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
-<tr>
-<th class="colOne" scope="col">Constructor and Description</th>
-</tr>
-<tr class="altColor">
-<td class="colOne"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#BTreeFile-java.io.File-int-simpledb.TupleDesc-">BTreeFile</a></span>(java.io.File&nbsp;f,
-         int&nbsp;key,
-         <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td)</code>
-<div class="block">Constructs a B+ tree file backed by the specified file.</div>
-</td>
-</tr>
-</table>
-</li>
-</ul>
-<!-- ========== METHOD SUMMARY =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.summary">
-<!--   -->
-</a>
-<h3>Method Summary</h3>
-<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
-<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
-<tr>
-<th class="colFirst" scope="col">Modifier and Type</th>
-<th class="colLast" scope="col">Method and Description</th>
-</tr>
-<tr id="i0" class="altColor">
-<td class="colFirst"><code>private void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#deleteParentEntry-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-">deleteParentEntry</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                 java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                 <a href="../simpledb/BTreePage.html" title="class in simpledb">BTreePage</a>&nbsp;leftPage,
-                 <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                 <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;parentEntry)</code>
-<div class="block">Method to encapsulate the process of deleting an entry (specifically the key and right child) 
- from a parent node.</div>
-</td>
-</tr>
-<tr id="i1" class="rowColor">
-<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#deleteTuple-simpledb.TransactionId-simpledb.Tuple-">deleteTuple</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-           <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</code>
-<div class="block">Delete a tuple from this BTreeFile.</div>
-</td>
-</tr>
-<tr id="i2" class="altColor">
-<td class="colFirst"><code>(package private) <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#findLeafPage-simpledb.TransactionId-simpledb.BTreePageId-simpledb.Permissions-simpledb.Field-">findLeafPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-            <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;pid,
-            <a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a>&nbsp;perm,
-            <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;f)</code>
-<div class="block">Convenience method to find a leaf page when there is no dirtypages HashMap.</div>
-</td>
-</tr>
-<tr id="i3" class="rowColor">
-<td class="colFirst"><code>private <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#findLeafPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.Permissions-simpledb.Field-">findLeafPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-            java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-            <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;pid,
-            <a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a>&nbsp;perm,
-            <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;f)</code>
-<div class="block">Recursive function which finds and locks the leaf page in the B+ tree corresponding to
- the left-most page possibly containing the key field f.</div>
-</td>
-</tr>
-<tr id="i4" class="altColor">
-<td class="colFirst"><code>private <a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#getEmptyPage-simpledb.TransactionId-java.util.HashMap-int-">getEmptyPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-            java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-            int&nbsp;pgcateg)</code>
-<div class="block">Method to encapsulate the process of creating a new page.</div>
-</td>
-</tr>
-<tr id="i5" class="rowColor">
-<td class="colFirst"><code>protected int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#getEmptyPageNo-simpledb.TransactionId-java.util.HashMap-">getEmptyPageNo</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-              java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages)</code>
-<div class="block">Get the page number of the first empty page in this BTreeFile.</div>
-</td>
-</tr>
-<tr id="i6" class="altColor">
-<td class="colFirst"><code>java.io.File</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#getFile--">getFile</a></span>()</code>
-<div class="block">Returns the File backing this BTreeFile on disk.</div>
-</td>
-</tr>
-<tr id="i7" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#getId--">getId</a></span>()</code>
-<div class="block">Returns an ID uniquely identifying this BTreeFile.</div>
-</td>
-</tr>
-<tr id="i8" class="altColor">
-<td class="colFirst"><code>(package private) <a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#getPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.Permissions-">getPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-       java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-       <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;pid,
-       <a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a>&nbsp;perm)</code>
-<div class="block">Method to encapsulate the process of locking/fetching a page.</div>
-</td>
-</tr>
-<tr id="i9" class="rowColor">
-<td class="colFirst"><code>private <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#getParentWithEmptySlots-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.Field-">getParentWithEmptySlots</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                       java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                       <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;parentId,
-                       <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;field)</code>
-<div class="block">Method to encapsulate the process of getting a parent page ready to accept new entries.</div>
-</td>
-</tr>
-<tr id="i10" class="altColor">
-<td class="colFirst"><code>(package private) <a href="../simpledb/BTreeRootPtrPage.html" title="class in simpledb">BTreeRootPtrPage</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#getRootPtrPage-simpledb.TransactionId-java.util.HashMap-">getRootPtrPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-              java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages)</code>
-<div class="block">Get a read lock on the root pointer page.</div>
-</td>
-</tr>
-<tr id="i11" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#getTupleDesc--">getTupleDesc</a></span>()</code>
-<div class="block">Returns the TupleDesc of the table stored in this DbFile.</div>
-</td>
-</tr>
-<tr id="i12" class="altColor">
-<td class="colFirst"><code>private void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#handleMinOccupancyInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-simpledb.BTreeEntry-">handleMinOccupancyInternalPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                              java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                              <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;page,
-                              <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                              <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;leftEntry,
-                              <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;rightEntry)</code>
-<div class="block">Handle the case when an internal page becomes less than half full due to deletions.</div>
-</td>
-</tr>
-<tr id="i13" class="rowColor">
-<td class="colFirst"><code>private void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#handleMinOccupancyLeafPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeLeafPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-simpledb.BTreeEntry-">handleMinOccupancyLeafPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                          java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                          <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;page,
-                          <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                          <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;leftEntry,
-                          <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;rightEntry)</code>
-<div class="block">Handle the case when a leaf page becomes less than half full due to deletions.</div>
-</td>
-</tr>
-<tr id="i14" class="altColor">
-<td class="colFirst"><code>private void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#handleMinOccupancyPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePage-">handleMinOccupancyPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                      java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                      <a href="../simpledb/BTreePage.html" title="class in simpledb">BTreePage</a>&nbsp;page)</code>
-<div class="block">Handle the case when a B+ tree page becomes less than half full due to deletions.</div>
-</td>
-</tr>
-<tr id="i15" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#indexIterator-simpledb.TransactionId-simpledb.IndexPredicate-">indexIterator</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-             <a href="../simpledb/IndexPredicate.html" title="class in simpledb">IndexPredicate</a>&nbsp;ipred)</code>
-<div class="block">get the specified tuples from the file based on its IndexPredicate value on
- behalf of the specified transaction.</div>
-</td>
-</tr>
-<tr id="i16" class="altColor">
-<td class="colFirst"><code>java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#insertTuple-simpledb.TransactionId-simpledb.Tuple-">insertTuple</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-           <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)</code>
-<div class="block">Insert a tuple into this BTreeFile, keeping the tuples in sorted order.</div>
-</td>
-</tr>
-<tr id="i17" class="rowColor">
-<td class="colFirst"><code><a href="../simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#iterator-simpledb.TransactionId-">iterator</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</code>
-<div class="block">Get an iterator for all tuples in this B+ tree file in sorted order.</div>
-</td>
-</tr>
-<tr id="i18" class="altColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#keyField--">keyField</a></span>()</code>
-<div class="block">Returns the index of the field that this B+ tree is keyed on</div>
-</td>
-</tr>
-<tr id="i19" class="rowColor">
-<td class="colFirst"><code>protected void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#mergeInternalPages-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-">mergeInternalPages</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                  java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                  <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;leftPage,
-                  <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;rightPage,
-                  <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                  <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;parentEntry)</code>
-<div class="block">Merge two internal pages by moving all entries from the right page to the left page 
- and "pulling down" the corresponding key from the parent entry.</div>
-</td>
-</tr>
-<tr id="i20" class="altColor">
-<td class="colFirst"><code>protected void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#mergeLeafPages-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeLeafPage-simpledb.BTreeLeafPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-">mergeLeafPages</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-              java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-              <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;leftPage,
-              <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;rightPage,
-              <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-              <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;parentEntry)</code>
-<div class="block">Merge two leaf pages by moving all tuples from the right page to the left page.</div>
-</td>
-</tr>
-<tr id="i21" class="rowColor">
-<td class="colFirst"><code>int</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#numPages--">numPages</a></span>()</code>
-<div class="block">Returns the number of pages in this BTreeFile.</div>
-</td>
-</tr>
-<tr id="i22" class="altColor">
-<td class="colFirst"><code><a href="../simpledb/Page.html" title="interface in simpledb">Page</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#readPage-simpledb.PageId-">readPage</a></span>(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid)</code>
-<div class="block">Read a page from the file on disk.</div>
-</td>
-</tr>
-<tr id="i23" class="rowColor">
-<td class="colFirst"><code>protected void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#setEmptyPage-simpledb.TransactionId-java.util.HashMap-int-">setEmptyPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-            java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-            int&nbsp;emptyPageNo)</code>
-<div class="block">Mark a page in this BTreeFile as empty.</div>
-</td>
-</tr>
-<tr id="i24" class="altColor">
-<td class="colFirst"><code>protected <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#splitInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.Field-">splitInternalPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                 java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                 <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;page,
-                 <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;field)</code>
-<div class="block">Split an internal page to make room for new entries and recursively split its parent page
- as needed to accommodate a new entry.</div>
-</td>
-</tr>
-<tr id="i25" class="rowColor">
-<td class="colFirst"><code>protected <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a></code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#splitLeafPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeLeafPage-simpledb.Field-">splitLeafPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-             java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-             <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;page,
-             <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;field)</code>
-<div class="block">Split a leaf page to make room for new tuples and recursively split the parent node
- as needed to accommodate a new entry.</div>
-</td>
-</tr>
-<tr id="i26" class="altColor">
-<td class="colFirst"><code>protected void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#stealFromLeafPage-simpledb.BTreeLeafPage-simpledb.BTreeLeafPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-boolean-">stealFromLeafPage</a></span>(<a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;page,
-                 <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;sibling,
-                 <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                 <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;entry,
-                 boolean&nbsp;isRightSibling)</code>
-<div class="block">Steal tuples from a sibling and copy them to the given page so that both pages are at least
- half full.</div>
-</td>
-</tr>
-<tr id="i27" class="rowColor">
-<td class="colFirst"><code>protected void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#stealFromLeftInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-">stealFromLeftInternalPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                         java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                         <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;page,
-                         <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;leftSibling,
-                         <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                         <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;parentEntry)</code>
-<div class="block">Steal entries from the left sibling and copy them to the given page so that both pages are at least
- half full.</div>
-</td>
-</tr>
-<tr id="i28" class="altColor">
-<td class="colFirst"><code>protected void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#stealFromRightInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-">stealFromRightInternalPage</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                          java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                          <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;page,
-                          <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;rightSibling,
-                          <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                          <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;parentEntry)</code>
-<div class="block">Steal entries from the right sibling and copy them to the given page so that both pages are at least
- half full.</div>
-</td>
-</tr>
-<tr id="i29" class="rowColor">
-<td class="colFirst"><code>private void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#updateParentPointer-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.BTreePageId-">updateParentPointer</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                   java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                   <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;pid,
-                   <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;child)</code>
-<div class="block">Helper function to update the parent pointer of a node.</div>
-</td>
-</tr>
-<tr id="i30" class="altColor">
-<td class="colFirst"><code>private void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#updateParentPointers-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-">updateParentPointers</a></span>(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                    java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                    <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;page)</code>
-<div class="block">Update the parent pointer of every child of the given page so that it correctly points to
- the parent</div>
-</td>
-</tr>
-<tr id="i31" class="rowColor">
-<td class="colFirst"><code>void</code></td>
-<td class="colLast"><code><span class="memberNameLink"><a href="../simpledb/BTreeFile.html#writePage-simpledb.Page-">writePage</a></span>(<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;page)</code>
-<div class="block">Write a page to disk.</div>
-</td>
-</tr>
-</table>
-<ul class="blockList">
-<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
-<!--   -->
-</a>
-<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
-<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-<div class="details">
-<ul class="blockList">
-<li class="blockList">
-<!-- ============ FIELD DETAIL =========== -->
-<ul class="blockList">
-<li class="blockList"><a name="field.detail">
-<!--   -->
-</a>
-<h3>Field Detail</h3>
-<a name="f">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>f</h4>
-<pre>private final&nbsp;java.io.File f</pre>
-</li>
-</ul>
-<a name="td">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>td</h4>
-<pre>private final&nbsp;<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a> td</pre>
-</li>
-</ul>
-<a name="tableid">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>tableid</h4>
-<pre>private final&nbsp;int tableid</pre>
-</li>
-</ul>
-<a name="keyField">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>keyField</h4>
-<pre>private&nbsp;int keyField</pre>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-<ul class="blockList">
-<li class="blockList"><a name="constructor.detail">
-<!--   -->
-</a>
-<h3>Constructor Detail</h3>
-<a name="BTreeFile-java.io.File-int-simpledb.TupleDesc-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>BTreeFile</h4>
-<pre>public&nbsp;BTreeFile(java.io.File&nbsp;f,
-                 int&nbsp;key,
-                 <a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;td)</pre>
-<div class="block">Constructs a B+ tree file backed by the specified file.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>f</code> - - the file that stores the on-disk backing store for this B+ tree
-            file.</dd>
-<dd><code>key</code> - - the field which index is keyed on</dd>
-<dd><code>td</code> - - the tuple descriptor of tuples in the file</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-<!-- ============ METHOD DETAIL ========== -->
-<ul class="blockList">
-<li class="blockList"><a name="method.detail">
-<!--   -->
-</a>
-<h3>Method Detail</h3>
-<a name="getFile--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getFile</h4>
-<pre>public&nbsp;java.io.File&nbsp;getFile()</pre>
-<div class="block">Returns the File backing this BTreeFile on disk.</div>
-</li>
-</ul>
-<a name="getId--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getId</h4>
-<pre>public&nbsp;int&nbsp;getId()</pre>
-<div class="block">Returns an ID uniquely identifying this BTreeFile. Implementation note:
- you will need to generate this tableid somewhere and ensure that each
- BTreeFile has a "unique id," and that you always return the same value for
- a particular BTreeFile. We suggest hashing the absolute file name of the
- file underlying the BTreeFile, i.e. f.getAbsoluteFile().hashCode().</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#getId--">getId</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>an ID uniquely identifying this BTreeFile.</dd>
-</dl>
-</li>
-</ul>
-<a name="getTupleDesc--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getTupleDesc</h4>
-<pre>public&nbsp;<a href="../simpledb/TupleDesc.html" title="class in simpledb">TupleDesc</a>&nbsp;getTupleDesc()</pre>
-<div class="block">Returns the TupleDesc of the table stored in this DbFile.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#getTupleDesc--">getTupleDesc</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>TupleDesc of this DbFile.</dd>
-</dl>
-</li>
-</ul>
-<a name="readPage-simpledb.PageId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>readPage</h4>
-<pre>public&nbsp;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;readPage(<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>&nbsp;pid)</pre>
-<div class="block">Read a page from the file on disk. This should not be called directly
- but should be called from the BufferPool via getPage()</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#readPage-simpledb.PageId-">readPage</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>pid</code> - - the id of the page to read from disk</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the page constructed from the contents on disk</dd>
-</dl>
-</li>
-</ul>
-<a name="writePage-simpledb.Page-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>writePage</h4>
-<pre>public&nbsp;void&nbsp;writePage(<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;page)
-               throws java.io.IOException</pre>
-<div class="block">Write a page to disk.  This should not be called directly but should 
- be called from the BufferPool when pages are flushed to disk</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#writePage-simpledb.Page-">writePage</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>page</code> - - the page to write to disk</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code>java.io.IOException</code> - if the write fails</dd>
-</dl>
-</li>
-</ul>
-<a name="numPages--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>numPages</h4>
-<pre>public&nbsp;int&nbsp;numPages()</pre>
-<div class="block">Returns the number of pages in this BTreeFile.</div>
-</li>
-</ul>
-<a name="keyField--">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>keyField</h4>
-<pre>public&nbsp;int&nbsp;keyField()</pre>
-<div class="block">Returns the index of the field that this B+ tree is keyed on</div>
-</li>
-</ul>
-<a name="findLeafPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.Permissions-simpledb.Field-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>findLeafPage</h4>
-<pre>private&nbsp;<a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;findLeafPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                   java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                   <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;pid,
-                                   <a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a>&nbsp;perm,
-                                   <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;f)
-                            throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                   <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Recursive function which finds and locks the leaf page in the B+ tree corresponding to
- the left-most page possibly containing the key field f. It locks all internal
- nodes along the path to the leaf node with READ_ONLY permission, and locks the 
- leaf node with permission perm.
- 
- If f is null, it finds the left-most leaf page -- used for the iterator</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>pid</code> - - the current page being searched</dd>
-<dd><code>perm</code> - - the permissions with which to lock the leaf page</dd>
-<dd><code>f</code> - - the field to search for</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the left-most leaf page possibly containing the key field f</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="findLeafPage-simpledb.TransactionId-simpledb.BTreePageId-simpledb.Permissions-simpledb.Field-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>findLeafPage</h4>
-<pre><a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;findLeafPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                           <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;pid,
-                           <a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a>&nbsp;perm,
-                           <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;f)
-                    throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                           <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Convenience method to find a leaf page when there is no dirtypages HashMap.
- Used by the BTreeFile iterator.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>pid</code> - - the current page being searched</dd>
-<dd><code>perm</code> - - the permissions with which to lock the leaf page</dd>
-<dd><code>f</code> - - the field to search for</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the left-most leaf page possibly containing the key field f</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#findLeafPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.Permissions-simpledb.Field-"><code>findLeafPage(TransactionId, HashMap, BTreePageId, Permissions, Field)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="splitLeafPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeLeafPage-simpledb.Field-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>splitLeafPage</h4>
-<pre>protected&nbsp;<a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;splitLeafPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                      java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                      <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;page,
-                                      <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;field)
-                               throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                      java.io.IOException,
-                                      <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Split a leaf page to make room for new tuples and recursively split the parent node
- as needed to accommodate a new entry. The new entry should have a key matching the key field
- of the first tuple in the right-hand page (the key is "copied up"), and child pointers 
- pointing to the two leaf pages resulting from the split.  Update sibling pointers and parent 
- pointers as needed.  
- 
- Return the leaf page into which a new tuple with key field "field" should be inserted.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>page</code> - - the leaf page to split</dd>
-<dd><code>field</code> - - the key field of the tuple to be inserted after the split is complete. Necessary to know
- which of the two pages to return.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the leaf page into which the new tuple should be inserted</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#getParentWithEmptySlots-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.Field-"><code>getParentWithEmptySlots(TransactionId, HashMap, BTreePageId, Field)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="splitInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.Field-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>splitInternalPage</h4>
-<pre>protected&nbsp;<a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;splitInternalPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                              java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                              <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;page,
-                                              <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;field)
-                                       throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                              java.io.IOException,
-                                              <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Split an internal page to make room for new entries and recursively split its parent page
- as needed to accommodate a new entry. The new entry for the parent should have a key matching 
- the middle key in the original internal page being split (this key is "pushed up" to the parent). 
- The child pointers of the new parent entry should point to the two internal pages resulting 
- from the split. Update parent pointers as needed.
- 
- Return the internal page into which an entry with key field "field" should be inserted</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>page</code> - - the internal page to split</dd>
-<dd><code>field</code> - - the key field of the entry to be inserted after the split is complete. Necessary to know
- which of the two pages to return.</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the internal page into which the new entry should be inserted</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#getParentWithEmptySlots-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.Field-"><code>getParentWithEmptySlots(TransactionId, HashMap, BTreePageId, Field)</code></a>, 
-<a href="../simpledb/BTreeFile.html#updateParentPointers-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-"><code>updateParentPointers(TransactionId, HashMap, BTreeInternalPage)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="getParentWithEmptySlots-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.Field-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getParentWithEmptySlots</h4>
-<pre>private&nbsp;<a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;getParentWithEmptySlots(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                                  java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                                  <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;parentId,
-                                                  <a href="../simpledb/Field.html" title="interface in simpledb">Field</a>&nbsp;field)
-                                           throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                                  java.io.IOException,
-                                                  <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Method to encapsulate the process of getting a parent page ready to accept new entries.
- This may mean creating a page to become the new root of the tree, splitting the existing 
- parent page if there are no empty slots, or simply locking and returning the existing parent page.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>parentId</code> - - the id of the parent. May be an internal page or the RootPtr page</dd>
-<dd><code>field</code> - - the key of the entry which will be inserted. Needed in case the parent must be split
- to accommodate the new entry</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the parent page, guaranteed to have at least one empty slot</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#splitInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.Field-"><code>splitInternalPage(TransactionId, HashMap, BTreeInternalPage, Field)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="updateParentPointer-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.BTreePageId-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>updateParentPointer</h4>
-<pre>private&nbsp;void&nbsp;updateParentPointer(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                 java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                 <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;pid,
-                                 <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;child)
-                          throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                 java.io.IOException,
-                                 <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Helper function to update the parent pointer of a node.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>pid</code> - - id of the parent node</dd>
-<dd><code>child</code> - - id of the child node to be updated with the parent pointer</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="updateParentPointers-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>updateParentPointers</h4>
-<pre>private&nbsp;void&nbsp;updateParentPointers(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                  java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                  <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;page)
-                           throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                  java.io.IOException,
-                                  <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Update the parent pointer of every child of the given page so that it correctly points to
- the parent</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>page</code> - - the parent page</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#updateParentPointer-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.BTreePageId-"><code>updateParentPointer(TransactionId, HashMap, BTreePageId, BTreePageId)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="getPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePageId-simpledb.Permissions-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getPage</h4>
-<pre><a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;getPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-             java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-             <a href="../simpledb/BTreePageId.html" title="class in simpledb">BTreePageId</a>&nbsp;pid,
-             <a href="../simpledb/Permissions.html" title="class in simpledb">Permissions</a>&nbsp;perm)
-      throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-             <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Method to encapsulate the process of locking/fetching a page.  First the method checks the local 
- cache ("dirtypages"), and if it can't find the requested page there, it fetches it from the buffer pool.  
- It also adds pages to the dirtypages cache if they are fetched with read-write permission, since 
- presumably they will soon be dirtied by this transaction.
- 
- This method is needed to ensure that page updates are not lost if the same pages are
- accessed multiple times.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>pid</code> - - the id of the requested page</dd>
-<dd><code>perm</code> - - the requested permissions on the page</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the requested page</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="insertTuple-simpledb.TransactionId-simpledb.Tuple-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>insertTuple</h4>
-<pre>public&nbsp;java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;insertTuple(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                             <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)
-                                      throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                             java.io.IOException,
-                                             <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Insert a tuple into this BTreeFile, keeping the tuples in sorted order. 
- May cause pages to split if the page where tuple t belongs is full.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#insertTuple-simpledb.TransactionId-simpledb.Tuple-">insertTuple</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>t</code> - - the tuple to insert</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a list of all pages that were dirtied by this operation. Could include
- many pages since parent pointers will need to be updated when an internal node splits.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - if the tuple cannot be added</dd>
-<dd><code>java.io.IOException</code> - if the needed file can't be read/written</dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#splitLeafPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeLeafPage-simpledb.Field-"><code>splitLeafPage(TransactionId, HashMap, BTreeLeafPage, Field)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="handleMinOccupancyPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePage-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>handleMinOccupancyPage</h4>
-<pre>private&nbsp;void&nbsp;handleMinOccupancyPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                    java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                    <a href="../simpledb/BTreePage.html" title="class in simpledb">BTreePage</a>&nbsp;page)
-                             throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                    java.io.IOException,
-                                    <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Handle the case when a B+ tree page becomes less than half full due to deletions.
- If one of its siblings has extra tuples/entries, redistribute those tuples/entries.
- Otherwise merge with one of the siblings. Update pointers as needed.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>page</code> - - the page which is less than half full</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#handleMinOccupancyLeafPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeLeafPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-simpledb.BTreeEntry-"><code>handleMinOccupancyLeafPage(TransactionId, HashMap, BTreeLeafPage, BTreeInternalPage, BTreeEntry, BTreeEntry)</code></a>, 
-<a href="../simpledb/BTreeFile.html#handleMinOccupancyInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-simpledb.BTreeEntry-"><code>handleMinOccupancyInternalPage(TransactionId, HashMap, BTreeInternalPage, BTreeInternalPage, BTreeEntry, BTreeEntry)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="handleMinOccupancyLeafPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeLeafPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-simpledb.BTreeEntry-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>handleMinOccupancyLeafPage</h4>
-<pre>private&nbsp;void&nbsp;handleMinOccupancyLeafPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                        java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                        <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;page,
-                                        <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                                        <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;leftEntry,
-                                        <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;rightEntry)
-                                 throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                        java.io.IOException,
-                                        <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Handle the case when a leaf page becomes less than half full due to deletions.
- If one of its siblings has extra tuples, redistribute those tuples.
- Otherwise merge with one of the siblings. Update pointers as needed.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>page</code> - - the leaf page which is less than half full</dd>
-<dd><code>parent</code> - - the parent of the leaf page</dd>
-<dd><code>leftEntry</code> - - the entry in the parent pointing to the given page and its left-sibling</dd>
-<dd><code>rightEntry</code> - - the entry in the parent pointing to the given page and its right-sibling</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#mergeLeafPages-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeLeafPage-simpledb.BTreeLeafPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-"><code>mergeLeafPages(TransactionId, HashMap, BTreeLeafPage, BTreeLeafPage, BTreeInternalPage, BTreeEntry)</code></a>, 
-<a href="../simpledb/BTreeFile.html#stealFromLeafPage-simpledb.BTreeLeafPage-simpledb.BTreeLeafPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-boolean-"><code>stealFromLeafPage(BTreeLeafPage, BTreeLeafPage, BTreeInternalPage,  BTreeEntry, boolean)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="stealFromLeafPage-simpledb.BTreeLeafPage-simpledb.BTreeLeafPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-boolean-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>stealFromLeafPage</h4>
-<pre>protected&nbsp;void&nbsp;stealFromLeafPage(<a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;page,
-                                 <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;sibling,
-                                 <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                                 <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;entry,
-                                 boolean&nbsp;isRightSibling)
-                          throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></pre>
-<div class="block">Steal tuples from a sibling and copy them to the given page so that both pages are at least
- half full.  Update the parent's entry so that the key matches the key field of the first
- tuple in the right-hand page.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>page</code> - - the leaf page which is less than half full</dd>
-<dd><code>sibling</code> - - the sibling which has tuples to spare</dd>
-<dd><code>parent</code> - - the parent of the two leaf pages</dd>
-<dd><code>entry</code> - - the entry in the parent pointing to the two leaf pages</dd>
-<dd><code>isRightSibling</code> - - whether the sibling is a right-sibling</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="handleMinOccupancyInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-simpledb.BTreeEntry-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>handleMinOccupancyInternalPage</h4>
-<pre>private&nbsp;void&nbsp;handleMinOccupancyInternalPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                            java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                            <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;page,
-                                            <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                                            <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;leftEntry,
-                                            <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;rightEntry)
-                                     throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                            java.io.IOException,
-                                            <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Handle the case when an internal page becomes less than half full due to deletions.
- If one of its siblings has extra entries, redistribute those entries.
- Otherwise merge with one of the siblings. Update pointers as needed.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>page</code> - - the internal page which is less than half full</dd>
-<dd><code>parent</code> - - the parent of the internal page</dd>
-<dd><code>leftEntry</code> - - the entry in the parent pointing to the given page and its left-sibling</dd>
-<dd><code>rightEntry</code> - - the entry in the parent pointing to the given page and its right-sibling</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#mergeInternalPages-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-"><code>mergeInternalPages(TransactionId, HashMap, BTreeInternalPage, BTreeInternalPage, BTreeInternalPage, BTreeEntry)</code></a>, 
-<a href="../simpledb/BTreeFile.html#stealFromLeftInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-"><code>stealFromLeftInternalPage(TransactionId, HashMap, BTreeInternalPage, BTreeInternalPage, BTreeInternalPage, BTreeEntry)</code></a>, 
-<a href="../simpledb/BTreeFile.html#stealFromRightInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-"><code>stealFromRightInternalPage(TransactionId, HashMap, BTreeInternalPage, BTreeInternalPage, BTreeInternalPage, BTreeEntry)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="stealFromLeftInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>stealFromLeftInternalPage</h4>
-<pre>protected&nbsp;void&nbsp;stealFromLeftInternalPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                         java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                         <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;page,
-                                         <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;leftSibling,
-                                         <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                                         <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;parentEntry)
-                                  throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                         java.io.IOException,
-                                         <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Steal entries from the left sibling and copy them to the given page so that both pages are at least
- half full. Keys can be thought of as rotating through the parent entry, so the original key in the 
- parent is "pulled down" to the right-hand page, and the last key in the left-hand page is "pushed up"
- to the parent.  Update parent pointers as needed.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>page</code> - - the internal page which is less than half full</dd>
-<dd><code>leftSibling</code> - - the left sibling which has entries to spare</dd>
-<dd><code>parent</code> - - the parent of the two internal pages</dd>
-<dd><code>parentEntry</code> - - the entry in the parent pointing to the two internal pages</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#updateParentPointers-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-"><code>updateParentPointers(TransactionId, HashMap, BTreeInternalPage)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="stealFromRightInternalPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>stealFromRightInternalPage</h4>
-<pre>protected&nbsp;void&nbsp;stealFromRightInternalPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                          java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                          <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;page,
-                                          <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;rightSibling,
-                                          <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                                          <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;parentEntry)
-                                   throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                          java.io.IOException,
-                                          <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Steal entries from the right sibling and copy them to the given page so that both pages are at least
- half full. Keys can be thought of as rotating through the parent entry, so the original key in the 
- parent is "pulled down" to the left-hand page, and the last key in the right-hand page is "pushed up"
- to the parent.  Update parent pointers as needed.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>page</code> - - the internal page which is less than half full</dd>
-<dd><code>rightSibling</code> - - the right sibling which has entries to spare</dd>
-<dd><code>parent</code> - - the parent of the two internal pages</dd>
-<dd><code>parentEntry</code> - - the entry in the parent pointing to the two internal pages</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#updateParentPointers-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-"><code>updateParentPointers(TransactionId, HashMap, BTreeInternalPage)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="mergeLeafPages-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeLeafPage-simpledb.BTreeLeafPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>mergeLeafPages</h4>
-<pre>protected&nbsp;void&nbsp;mergeLeafPages(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                              java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                              <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;leftPage,
-                              <a href="../simpledb/BTreeLeafPage.html" title="class in simpledb">BTreeLeafPage</a>&nbsp;rightPage,
-                              <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                              <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;parentEntry)
-                       throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                              java.io.IOException,
-                              <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Merge two leaf pages by moving all tuples from the right page to the left page. 
- Delete the corresponding key and right child pointer from the parent, and recursively 
- handle the case when the parent gets below minimum occupancy.
- Update sibling pointers as needed, and make the right page available for reuse.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>leftPage</code> - - the left leaf page</dd>
-<dd><code>rightPage</code> - - the right leaf page</dd>
-<dd><code>parent</code> - - the parent of the two pages</dd>
-<dd><code>parentEntry</code> - - the entry in the parent corresponding to the leftPage and rightPage</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#deleteParentEntry-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-"><code>deleteParentEntry(TransactionId, HashMap, BTreePage, BTreeInternalPage, BTreeEntry)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="mergeInternalPages-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>mergeInternalPages</h4>
-<pre>protected&nbsp;void&nbsp;mergeInternalPages(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                  java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                                  <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;leftPage,
-                                  <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;rightPage,
-                                  <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                                  <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;parentEntry)
-                           throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                  java.io.IOException,
-                                  <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Merge two internal pages by moving all entries from the right page to the left page 
- and "pulling down" the corresponding key from the parent entry. 
- Delete the corresponding key and right child pointer from the parent, and recursively 
- handle the case when the parent gets below minimum occupancy.
- Update parent pointers as needed, and make the right page available for reuse.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>leftPage</code> - - the left internal page</dd>
-<dd><code>rightPage</code> - - the right internal page</dd>
-<dd><code>parent</code> - - the parent of the two pages</dd>
-<dd><code>parentEntry</code> - - the entry in the parent corresponding to the leftPage and rightPage</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#deleteParentEntry-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-"><code>deleteParentEntry(TransactionId, HashMap, BTreePage, BTreeInternalPage, BTreeEntry)</code></a>, 
-<a href="../simpledb/BTreeFile.html#updateParentPointers-simpledb.TransactionId-java.util.HashMap-simpledb.BTreeInternalPage-"><code>updateParentPointers(TransactionId, HashMap, BTreeInternalPage)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="deleteParentEntry-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePage-simpledb.BTreeInternalPage-simpledb.BTreeEntry-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>deleteParentEntry</h4>
-<pre>private&nbsp;void&nbsp;deleteParentEntry(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                               java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                               <a href="../simpledb/BTreePage.html" title="class in simpledb">BTreePage</a>&nbsp;leftPage,
-                               <a href="../simpledb/BTreeInternalPage.html" title="class in simpledb">BTreeInternalPage</a>&nbsp;parent,
-                               <a href="../simpledb/BTreeEntry.html" title="class in simpledb">BTreeEntry</a>&nbsp;parentEntry)
-                        throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                               java.io.IOException,
-                               <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Method to encapsulate the process of deleting an entry (specifically the key and right child) 
- from a parent node.  If the parent becomes empty (no keys remaining), that indicates that it 
- was the root node and should be replaced by its one remaining child.  Otherwise, if it gets 
- below minimum occupancy for non-root internal nodes, it should steal from one of its siblings or 
- merge with a sibling.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>leftPage</code> - - the child remaining after the key and right child are deleted</dd>
-<dd><code>parent</code> - - the parent containing the entry to be deleted</dd>
-<dd><code>parentEntry</code> - - the entry to be deleted</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#handleMinOccupancyPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePage-"><code>handleMinOccupancyPage(TransactionId, HashMap, BTreePage)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="deleteTuple-simpledb.TransactionId-simpledb.Tuple-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>deleteTuple</h4>
-<pre>public&nbsp;java.util.ArrayList&lt;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;deleteTuple(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                             <a href="../simpledb/Tuple.html" title="class in simpledb">Tuple</a>&nbsp;t)
-                                      throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                             java.io.IOException,
-                                             <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Delete a tuple from this BTreeFile. 
- May cause pages to merge or redistribute entries/tuples if the pages 
- become less than half full.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#deleteTuple-simpledb.TransactionId-simpledb.Tuple-">deleteTuple</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>t</code> - - the tuple to delete</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>a list of all pages that were dirtied by this operation. Could include
- many pages since parent pointers will need to be updated when an internal node merges.</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code> - if the tuple cannot be deleted or is not a member
-   of the file</dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#handleMinOccupancyPage-simpledb.TransactionId-java.util.HashMap-simpledb.BTreePage-"><code>handleMinOccupancyPage(TransactionId, HashMap, BTreePage)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="getRootPtrPage-simpledb.TransactionId-java.util.HashMap-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getRootPtrPage</h4>
-<pre><a href="../simpledb/BTreeRootPtrPage.html" title="class in simpledb">BTreeRootPtrPage</a>&nbsp;getRootPtrPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages)
-                         throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                                java.io.IOException,
-                                <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Get a read lock on the root pointer page. Create the root pointer page and root page
- if necessary.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the root pointer page</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="getEmptyPageNo-simpledb.TransactionId-java.util.HashMap-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getEmptyPageNo</h4>
-<pre>protected&nbsp;int&nbsp;getEmptyPageNo(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                             java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages)
-                      throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                             java.io.IOException,
-                             <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Get the page number of the first empty page in this BTreeFile.
- Creates a new page if none of the existing pages are empty.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the page number of the first empty page</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-</dl>
-</li>
-</ul>
-<a name="getEmptyPage-simpledb.TransactionId-java.util.HashMap-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>getEmptyPage</h4>
-<pre>private&nbsp;<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&nbsp;getEmptyPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                          java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                          int&nbsp;pgcateg)
-                   throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                          java.io.IOException,
-                          <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Method to encapsulate the process of creating a new page.  It reuses old pages if possible,
- and creates a new page if none are available.  It wipes the page on disk and in the cache and 
- returns a clean copy locked with read-write permission</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>pgcateg</code> - - the BTreePageId category of the new page.  Either LEAF, INTERNAL, or HEADER</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>the new empty page</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#getEmptyPageNo-simpledb.TransactionId-java.util.HashMap-"><code>getEmptyPageNo(TransactionId, HashMap)</code></a>, 
-<a href="../simpledb/BTreeFile.html#setEmptyPage-simpledb.TransactionId-java.util.HashMap-int-"><code>setEmptyPage(TransactionId, HashMap, int)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="setEmptyPage-simpledb.TransactionId-java.util.HashMap-int-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>setEmptyPage</h4>
-<pre>protected&nbsp;void&nbsp;setEmptyPage(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                            java.util.HashMap&lt;<a href="../simpledb/PageId.html" title="interface in simpledb">PageId</a>,<a href="../simpledb/Page.html" title="interface in simpledb">Page</a>&gt;&nbsp;dirtypages,
-                            int&nbsp;emptyPageNo)
-                     throws <a href="../simpledb/DbException.html" title="class in simpledb">DbException</a>,
-                            java.io.IOException,
-                            <a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></pre>
-<div class="block">Mark a page in this BTreeFile as empty. Find the corresponding header page 
- (create it if needed), and mark the corresponding slot in the header page as empty.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>dirtypages</code> - - the list of dirty pages which should be updated with all new dirty pages</dd>
-<dd><code>emptyPageNo</code> - - the page number of the empty page</dd>
-<dt><span class="throwsLabel">Throws:</span></dt>
-<dd><code><a href="../simpledb/DbException.html" title="class in simpledb">DbException</a></code></dd>
-<dd><code>java.io.IOException</code></dd>
-<dd><code><a href="../simpledb/TransactionAbortedException.html" title="class in simpledb">TransactionAbortedException</a></code></dd>
-<dt><span class="seeLabel">See Also:</span></dt>
-<dd><a href="../simpledb/BTreeFile.html#getEmptyPage-simpledb.TransactionId-java.util.HashMap-int-"><code>getEmptyPage(TransactionId, HashMap, int)</code></a></dd>
-</dl>
-</li>
-</ul>
-<a name="indexIterator-simpledb.TransactionId-simpledb.IndexPredicate-">
-<!--   -->
-</a>
-<ul class="blockList">
-<li class="blockList">
-<h4>indexIterator</h4>
-<pre>public&nbsp;<a href="../simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a>&nbsp;indexIterator(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid,
-                                    <a href="../simpledb/IndexPredicate.html" title="class in simpledb">IndexPredicate</a>&nbsp;ipred)</pre>
-<div class="block">get the specified tuples from the file based on its IndexPredicate value on
- behalf of the specified transaction. This method will acquire a read lock on
- the affected pages of the file, and may block until the lock can be
- acquired.</div>
-<dl>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dd><code>ipred</code> - - the index predicate value to filter on</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>an iterator for the filtered tuples</dd>
-</dl>
-</li>
-</ul>
-<a name="iterator-simpledb.TransactionId-">
-<!--   -->
-</a>
-<ul class="blockListLast">
-<li class="blockList">
-<h4>iterator</h4>
-<pre>public&nbsp;<a href="../simpledb/DbFileIterator.html" title="interface in simpledb">DbFileIterator</a>&nbsp;iterator(<a href="../simpledb/TransactionId.html" title="class in simpledb">TransactionId</a>&nbsp;tid)</pre>
-<div class="block">Get an iterator for all tuples in this B+ tree file in sorted order. This method 
- will acquire a read lock on the affected pages of the file, and may block until 
- the lock can be acquired.</div>
-<dl>
-<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
-<dd><code><a href="../simpledb/DbFile.html#iterator-simpledb.TransactionId-">iterator</a></code>&nbsp;in interface&nbsp;<code><a href="../simpledb/DbFile.html" title="interface in simpledb">DbFile</a></code></dd>
-<dt><span class="paramLabel">Parameters:</span></dt>
-<dd><code>tid</code> - - the transaction id</dd>
-<dt><span class="returnLabel">Returns:</span></dt>
-<dd>an iterator for all the tuples in this file</dd>
-</dl>
-</li>
-</ul>
-</li>
-</ul>
-</li>
-</ul>
-</div>
-</div>
-<!-- ========= END OF CLASS DATA ========= -->
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<div class="bottomNav"><a name="navbar.bottom">
-<!--   -->
-</a>
-<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
-<a name="navbar.bottom.firstrow">
-<!--   -->
-</a>
-<ul class="navList" title="Navigation">
-<li><a href="../simpledb/package-summary.html">Package</a></li>
-<li class="navBarCell1Rev">Class</li>
-<li><a href="package-tree.html">Tree</a></li>
-<li><a href="../deprecated-list.html">Deprecated</a></li>
-<li><a href="../index-all.html">Index</a></li>
-<li><a href="../help-doc.html">Help</a></li>
-</ul>
-</div>
-<div class="subNav">
-<ul class="navList">
-<li><a href="../simpledb/BTreeEntry.html" title="class in simpledb"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
-<li><a href="../simpledb/BTreeFileEncoder.html" title="class in simpledb"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
-</ul>
-<ul class="navList">
-<li><a href="../index.html?simpledb/BTreeFile.html" target="_top">Frames</a></li>
-<li><a href="BTreeFile.html" target="_top">No&nbsp;Frames</a></li>
-</ul>
-<ul class="navList" id="allclasses_navbar_bottom">
-<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
-</ul>
-<div>
-<script type="text/javascript"><!--
-  allClassesLink = document.getElementById("allclasses_navbar_bottom");
-  if(window==top) {
-    allClassesLink.style.display = "block";
-  }
-  else {
-    allClassesLink.style.display = "none";
-  }
-  //-->
-</script>
-</div>
-<div>
-<ul class="subNavList">
-<li>Summary:&nbsp;</li>
-<li>Nested&nbsp;|&nbsp;</li>
-<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.summary">Method</a></li>
-</ul>
-<ul class="subNavList">
-<li>Detail:&nbsp;</li>
-<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
-<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
-<li><a href="#method.detail">Method</a></li>
-</ul>
-</div>
-<a name="skip.navbar.bottom">
-<!--   -->
-</a></div>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-</body>
-</html>
